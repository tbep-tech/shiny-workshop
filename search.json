[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dashboards: Using R to create actionable science",
    "section": "",
    "text": "About this Workshop\nThe Shiny R package is now ten years old and is a popular tool to create immersive, web-based content. Although many coastal scientists have experience with R, expertise in dashboards is uncommon. This workshop will include a mix of instructor-led demonstrations, discussion, and exercises that will empower attendees to create their own Shiny applications. We will begin by showing what’s possible with the Quarto publishing system and Shiny by demoing existing applications from the Marine Biological Observation Network and the National Estuary Program. We will then transition to instructional material on the fundamentals of reactive programming with Shiny. Recent additions and improvements to Shiny (e.g., drag and drop user interface development, Python integration) will also be demonstrated. The remainder of the workshop will involve hands-on exercises that will allow attendees to develop their own applications using data from the examples above.\nAnyone interested in learning how to expand existing R skills for dashboard development will benefit from this workshop. This includes student, early career, and advanced professionals from any employment sector and field of expertise.\nAlso see:"
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "Dashboards: Using R to create actionable science",
    "section": "Setup",
    "text": "Setup\nPlease visit the setup page for instructions on preparing for this workshop. You will be required to install R, RStudio, and Quarto prior to the workshop.\nWe also expect some prior experience using R. Please visit the intro to R page for a quick crash course."
  },
  {
    "objectID": "index.html#presenters",
    "href": "index.html#presenters",
    "title": "Dashboards: Using R to create actionable science",
    "section": "Presenters",
    "text": "Presenters\n\nMarcus Beck, Ph.D.\n\n\n\n\n\n\n\n\nMarcus Beck is the Program Scientist for the Tampa Bay Estuary Program in St. Petersburg, Florida and is developing data analysis and visualization methods for Bay health indicators. Marcus has experience researching environmental indicators and developing open science products to support environmental decision-making. He has been using the R statistical programming language for over 15 years and has taught several workshops on its application to environmental sciences. Marcus has also developed several R packages and currently maintains 7 on CRAN. He received a PhD in Conservation Biology with a minor in Statistics from the University of Minnesota in 2013, his Masters in Conservation Biology from the University of Minnesota in 2009, and his Bachelors in Zoology from the University of Florida in 2007.\n\n\n\n\nBen Best, Ph.D.\n\n\n\n\n\n\n\n\nBen Best is an environmental data scientist at his consultancy EcoQuants LLC working predominantly on marine spatial ecology, particularly marine biodiversity and environmentally responsible marine renewable energy development. He taught courses at graduate and undergraduate levels as well as workshops on reproducible research, environmental informatics, spatial analysis, landscape ecology, machine learning and collaborative coding. He has worked on big data marine biogeographic and conservation projects such as OBIS-SEAMAP, Ocean Health Index, Marine Biodiversity Observation Network (MBON), NOAA’s Integrated Ecosystem Assessment, California Cooperative Fisheries Investigation (CalCOFI) and WhaleSafe. He has a PhD from Duke University’s Marine Geospatial Ecology Lab, a Masters in Environmental Sciences from Duke and undergraduate degrees in Aquatic Biology and Geography from UC Santa Barbara.\n\n\n\n\nEnrique Montes, Ph.D.\n\n\n\n\n\n\n\n\nEnrique Montes is a biological oceanographer working at the U. Miami Cooperative Institute for Marine and Atmospheric Studies (CIMAS) and NOAA’s Atlantic Oceanographic and Meteorological Laboratory (AOML) studying responses of marine life to changes in atmospheric and oceanographic conditions. His research integrates environmental, bio-optical, genomic, and taxonomic measurements collected from ships with satellite data to resolve the oceanographic context of local observations, and characterize regional biogeographic conditions and ocean habitats. He is a Co-Investigator of the Marine Biodiversity Observation Network (MBON) in the USA and internationally. Montes is the Principal Investigator of the MBON Pole-to-Pole of the Americas, presides the International Association for Biological Oceanography (IABO), and serves as Executive Committee member of the Scientific Committee on Oceanic Research (SCOR).\n\n\n\n\nTylar Murray\n\n\n\n\n\n\n\n\nTylar Murray is an interdisciplinary PhD with a passion for data visualization, data analysis, pragmatic software engineering, FOSS, and science! Tylar is an advocate of hacker ethic, unix philosophy, AGI superiority, and optimistic futurism. Tylar has software engineering experience spanning the gamut of programming languages, and academic proficiency expanding the interface between the digital and physical worlds. Tylar is an experienced instructor of applied technologies under projects funded by NSF, NASA, Microsoft, Google, and others. Over the last 5 years, Tylar consistently ranks within the top 10% of contributors in terms of both GitHub commit metrics and Stack Overflow reputation ranks, signifying a lasting commitment to open development principles."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This workshop will expose you to the basics of creating interactive dashboards in R. Before we begin, it’s useful to distinguish between dynamic and interactive dashboards."
  },
  {
    "objectID": "quarto.html#learning-objectives",
    "href": "quarto.html#learning-objectives",
    "title": "2  Dynamic: Quarto",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nUse the Quarto document preparation system to create interactive documents that combine text and code. Learn how to share these documents with colleagues through GitHub."
  },
  {
    "objectID": "quarto.html#install-quarto-r-package",
    "href": "quarto.html#install-quarto-r-package",
    "title": "2  Dynamic: Quarto",
    "section": "2.1 Install quarto R package",
    "text": "2.1 Install quarto R package\nEnsure you have the quarto R package installed. Look in RStudio’s Packages pane and Install if not found when searching for “quarto”."
  },
  {
    "objectID": "quarto.html#quarto-using-crosstalk",
    "href": "quarto.html#quarto-using-crosstalk",
    "title": "2  Dynamic: Quarto",
    "section": "2.2 Quarto using Crosstalk",
    "text": "2.2 Quarto using Crosstalk\n\nhttps://rstudio.github.io/crosstalk\n\n\nlibrary(crosstalk)\nlibrary(leaflet)\nlibrary(DT)\n\n# Wrap data frame in SharedData\nsd &lt;- SharedData$new(quakes[sample(nrow(quakes), 100),])\n\n# Create a filter input\nfilter_slider(\"mag\", \"Magnitude\", sd, column=~mag, step=0.1, width=250)\n\n\nMagnitude\n\n\n\n\n# Use SharedData like a dataframe with Crosstalk-enabled widgets\nbscols(\n  leaflet(sd) %&gt;% \n    addTiles() %&gt;% \n    addMarkers(),\n  datatable(\n    sd, extensions=\"Scroller\", style=\"bootstrap\", class=\"compact\", width=\"100%\",\n    options=list(deferRender=TRUE, scrollY=300, scroller=TRUE)))"
  },
  {
    "objectID": "shiny.html#learning-objectives",
    "href": "shiny.html#learning-objectives",
    "title": "3  Interactive: Shiny Applications",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nUse the Shiny framework to develop online interactive applications accepting user input to render outputs from arbitrary R functions. Server requirements differentiating from simpler Rmarkdown renderings will be reviewed."
  },
  {
    "objectID": "shiny.html#install-shiny-r-package",
    "href": "shiny.html#install-shiny-r-package",
    "title": "3  Interactive: Shiny Applications",
    "section": "3.1 Install shiny R package",
    "text": "3.1 Install shiny R package\nEnsure you have the shiny R package installed. Look in RStudio’s Packages pane and Install if not found when searching for “shiny”.\nA few other packages will get used so let’s use the librarian::shelf() command to install if needed:\n\nlibrarian::shelf(\n  plotly, reactlog, shiny, shinydashboard)"
  },
  {
    "objectID": "shiny.html#create-your-first-shiny-web-app",
    "href": "shiny.html#create-your-first-shiny-web-app",
    "title": "3  Interactive: Shiny Applications",
    "section": "3.2 Create your first Shiny web app",
    "text": "3.2 Create your first Shiny web app\nSimilar to other examples, let’s create a simple Shiny app starting from the provided default by going to File -&gt; New File -&gt; Shiny Web App… and name it app-faithful (after faithful, the Old Faithful geyser eruption frequency dataset used in this default example):\n\n\n\n\n\nFor now, let’s go with the default Single File option that puts the entire application in app.R rather than splitting it in two (ui.R/server.R). You should see the following contents in the new app.R file contents:\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n    output$distPlot &lt;- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    &lt;- faithful[, 2]\n        bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white')\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\nLet’s next Run App. Note that you can change the options by clicking on the down triangle next to the button, such as running the app in your default web browser (Run External), a pop-up window or in RStudio’s Viewer Pane.\n\n\n\n\n\nNow you can change the values in the slider on the left, then see the plot updated:\n\n\n\n\n\nIn Shiny parlance, the histogram plot is reactive to the slider. Normally when creating web apps, this type of “reactivity” is quite complicated to code, but here by simply using input$bins in the plotting function for the output$distPlot, Shiny registers that this plot needs to be updated when the user changes the input$bins value.\n\n3.2.1 Run in showcase mode\nThis default example along with other are made available in the shiny package’s installed folder:\n\n# get path to \"examples\" under your installation of the Shiny R package\ndir_examples  &lt;- system.file(\"examples\", package=\"shiny\")\n\n# get all directories listed there\ndirs_examples &lt;- list.dirs(dir_examples, recursive = F)\n\n# show the folder name only, not the rest of the path preceding (ie dirname())\nbasename(dirs_examples)\n\n [1] \"01_hello\"      \"02_text\"       \"03_reactivity\" \"04_mpg\"       \n [5] \"05_sliders\"    \"06_tabsets\"    \"07_widgets\"    \"08_html\"      \n [9] \"09_upload\"     \"10_download\"   \"11_timer\"     \n\n\nAnother way to launch the shiny app is with the following:\n\n# set directory to 01_hello app, aka the simplest default faithful app\ndir_hello_app &lt;- file.path(dir_examples, \"01_hello\")\n\n# run the app with display.mode = \"auto\"\n#   which under shiny R package uses \"showcase\" mode because of the DESCRIPTION  file there (see ?shiny::runApp)\nshiny::runApp(dir_hello_app)"
  },
  {
    "objectID": "shiny.html#download-run-examples",
    "href": "shiny.html#download-run-examples",
    "title": "3  Interactive: Shiny Applications",
    "section": "3.3 Download & run examples",
    "text": "3.3 Download & run examples\nNext, let’s go through examples together.\nDownload shiny-intro-master.zip into your r3-exercises/, unzip it and rename the top-level folder to apps/ so you can see the following application folders directly under r3-exercises/apps/:\n\n01_faithful: default app from using RStudio, File &gt; New File &gt; Shiny Web App… \n02_quakes_mag: swap to quakes dataset, adjust histogram by magnitude\n03_quakes_depth: add depth slider, select box for variable to histogram\n04_quakes_map: add leaflet map\n05_quakes_dashboard: enhance user interface (ie “ui”) with shinydashboard \n\nNumbered folders in this repository correspond with iterative development and enhancement of a Shiny app.\nThe following sections in this Rmarkdown document demonstrate how you can develop output visualizations for use in a Shiny app, especially by defining input variables as a list (input$*).\nKnitting Rmarkdown documents and pushing to Github then allows the HTML to be viewable (using the Github Pages feature). In contrast, Github and most web hosting services can not host a Shiny app. Although the leaflet and plotly visualizations in this document are interactive in the web browser, they do not require the Shiny library or a Shiny server to be displayed. Rather, the HTML output can be easily hosted on the most basic web server or passed as an email attachment. The Shiny context allows for ultimate flexibility with user interactions, but may be overkill for basic visualization. Check out all the amazing htmlwidgets.org and framework that works in the three contexts of: 1) RStudio, 2) Rmarkdown, and 3) Shiny.\n\n3.3.1 01_faithful\n\nCode: 01_faithful\nRun from GitHub:\nshiny::runGitHub(\"bbest/shiny-intro\", subdir=\"01_faithful\")\nRun locally:\nshiny::runApp(\"01_faithful\")\n\nIn order to quickly experiment with visualization, we could pull the code from within the rendering function of the Shiny app and set the input list values that would otherwise be set from the user interface…\n\ninput = list(bins = 30)\n\nx &lt;- faithful[, 2] \nbins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n    \nhist(x, breaks = bins, col = 'darkgray', border = 'white')\n\n\n\n\n\n\n\n\n\n\n3.3.2 02_quakes_mag\n\nlibrary(tidyverse)\n\ninput &lt;- list(slider_mag = c(4, 6))\n\nd &lt;- quakes %&gt;%\n  filter(\n    mag &gt;= input$slider_mag[1],\n    mag &lt;= input$slider_mag[2])\n\nhist(d$mag, col = 'darkgray', border = 'white')\n\n\n\n\n\n\n\n\n\nCode: 02_quakes_mag\nRun from GitHub:\nshiny::runGitHub(\"bbest/shiny-intro\", subdir=\"02_quakes_mag\")\nRun locally:\nshiny::runApp(\"02_quakes_mag\")\n\n\n\n3.3.3 03_quakes_depth\n\nlibrary(tidyverse)\n\ninput &lt;- list(\n  select_var = \"depth\", \n  slider_mag = c(4, 5), \n  slider_depth = c(0, 100))\n\nd &lt;- quakes %&gt;%\n  filter(\n    mag   &gt;= input$slider_mag[1],\n    mag   &lt;= input$slider_mag[2],\n    depth &gt;= input$slider_depth[1],\n    depth &lt;= input$slider_depth[2])\n\nhist(d[,input$select_var], col = 'darkgray', border = 'white')\n\n\n\n\n\n\n\n\n\nCode: 03_quakes_depth\nRun from GitHub:\nshiny::runGitHub(\"bbest/shiny-intro\", subdir=\"03_quakes_depth\")\nRun locally:\nshiny::runApp(\"03_quakes_depth\")\nshiny-intro/04_quakes_map at master · bbest/shiny-intro\nshiny-intro/05_quakes_dashboard at master · bbest/shiny-intro\nFiji earthquakes\n\n\n\n3.3.4 04_quakes_map\n\nLeaflet for R - Markers\n\n\nlibrary(leaflet)\nlibrary(glue)\n\nleaflet(data = quakes[1:20,]) %&gt;% \n  addTiles() %&gt;%\n  addCircleMarkers(\n    radius = ~mag, color = \"red\", stroke = FALSE, fillOpacity = 0.5,\n    popup = ~glue(\"&lt;b&gt;mag&lt;/b&gt;: {mag}&lt;br&gt;depth: {depth} m\"), label = ~as.character(mag))\n\n\n\n\n\n\nCode: 04_quakes_map\nRun from GitHub:\nshiny::runGitHub(\"bbest/shiny-intro\", subdir=\"04_quakes_map\")\nRun locally:\nshiny::runApp(\"04_quakes_map\")\n\n\n\n3.3.5 05_quakes_dashboard\nUse:\n\nshinydashboard\nggplot2\nplot.ly\n\n\nlibrary(tidyverse)\nlibrary(glue)\n\ninput &lt;- list(\n  select_var   = \"depth\", \n  slider_mag   = c(4, 5), \n  slider_depth = c(0, 100))\n\nget_df &lt;- function(){\n  df &lt;- quakes %&gt;%\n    filter(\n      mag   &gt;= input$slider_mag[1],\n      mag   &lt;= input$slider_mag[2],\n      depth &gt;= input$slider_depth[1],\n      depth &lt;= input$slider_depth[2])\n  df$var &lt;- df[[input$select_var]]\n  df\n}\n\ndf        &lt;- get_df()\nbin_width &lt;- min(c(7, length(unique(df$var))))\n    \ng &lt;- ggplot(df, aes(var)) + \n  geom_histogram(binwidth=bin_width)\n\nplotly::ggplotly(g)\n\n\n\n\n\n\nCode: 05_quakes_dashboard\nRun from GitHub:\nshiny::runGitHub(\"bbest/shiny-intro\", subdir=\"05_quakes_dashboard\")\nRun locally:\nshiny::runApp(\"05_quakes_dashboard\")\nView app directly: https://bdbest.shinyapps.io/05_quakes_dashboard"
  },
  {
    "objectID": "shiny.html#further-resources",
    "href": "shiny.html#further-resources",
    "title": "3  Interactive: Shiny Applications",
    "section": "Further Resources",
    "text": "Further Resources\n\nShiny Cheatsheet\nShiny Tutorial\nIntroduction to Shiny - RStudio"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "4  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "ui_design.html#user-story-development",
    "href": "ui_design.html#user-story-development",
    "title": "5  UI/UX Design w/ user-centered co-design",
    "section": "5.1 user story development",
    "text": "5.1 user story development\nTODO\n\n5.1.1 use-case collection\nTODO\n\n\n5.1.2 select user-story\nTODO\n\n\n5.1.3 iterative design\nTODO\n\n\n5.1.4 speak aloud protocol\nTODO"
  },
  {
    "objectID": "setup.html#install-r-and-rstudio",
    "href": "setup.html#install-r-and-rstudio",
    "title": "Appendix A — Setup for the workshop",
    "section": "A.1 Install R and RStudio",
    "text": "A.1 Install R and RStudio\nR and RStudio are separate downloads and installations. R is the underlying statistical computing software. RStudio is a graphical integrated development environment (IDE) that makes using R much easier and more interactive. You need to install R before you install RStudio.\nThanks to the USGS-R Training group and Data Carpentry for making their installation materials available. The following instructions come directly from their materials, with a few minor edits to help you get set up.\n\nA.1.1 Windows: Download and install R\nGo to CRAN and download the R installer for Windows. Make sure to choose the latest stable version (v4.2.3 as of April 2023).\nOnce the installer downloads, Right-click on it and select “Run as administrator”.\nType in your credentials and click yes (or if you don’t have administrator access have your IT rep install with Admin privileges).\n\n\n\n\n\nYou can click next through the standard dialogs and accept most defaults. But at the destination screen, please verify that it is installing it to C:\\Program Files\\R\n\n\n\n\n\nAt the “Select Components” screen, you can accept the default and install both 32-bit and 64-bit versions.\n\n\n\n\n\nAt this screen, uncheck ‘Create a desktop icon’ because non-admin users in Windows will be unable to delete it.\n\n\n\n\n\n\n\nA.1.2 Windows: Download and install RStudio\nDownload RStudio from here.\nAfter download, double-click the installer. It will ask for your administrator credentials to install (you might need to have your IT rep install again).\nAccept all the default options for the RStudio install.\n\n\n\n\n\n\n\nA.1.3 macOS: Download and install R\n\nDownload and install R from the CRAN website for Mac here.\nSelect the .pkg file for the latest R version\nDouble click on the downloaded file to install R\nIt is also a good idea to install XQuartz (needed by some packages)\n\n\n\nA.1.4 macOS: Download and install RStudio\n\nGo to the RStudio download page\nUnder Installers select the appropriate RStudio download file for macOS\nDouble click the file to install RStudio\n\n\n\nA.1.5 Check Install\nOnce installed, RStudio should be accessible from the start menu. Start up RStudio. Once running it should look something like this:"
  },
  {
    "objectID": "setup.html#sec-instquarto",
    "href": "setup.html#sec-instquarto",
    "title": "Appendix A — Setup for the workshop",
    "section": "A.2 Install Quarto",
    "text": "A.2 Install Quarto\nA visual editor for Quarto is installed with RStudio. However, you’ll need to install Quarto CLI to make full use of its features.\nNavigate to https://quarto.org/docs/get-started/. You’ll see a screen that looks like this:\n\n\n\n\n\nSelect the download appropriate for your operating system (Windows is the big blue button). After the file is downloaded, navigate to the folder containing the file, double-click to install, and accept the default settings at the prompts.\nAfter installation is done, open RStudio (or close and open again) and select the Terminal tab. This tab is located on the bottom-left pane, next to the Console tab. Type quarto check at the prompt and press enter. You should see something like this if installation was successful."
  },
  {
    "objectID": "rintro.html#rstudio",
    "href": "rintro.html#rstudio",
    "title": "Appendix B — Introduction to R",
    "section": "B.1 RStudio",
    "text": "B.1 RStudio\nRStudio is the go-to Interactive Development Environment (IDE) for R. Rstudio includes many features to improve the user’s experience.\nLet’s get familiar with RStudio.\n\nB.1.1 Open R and RStudio\nFind the RStudio shortcut on your computer and fire it up. You should see something like this:\n\n\n\n\n\nThere are four panes in RStudio:\n\nSource: Your primary window for writing code to send to the console, this is where you write and save R “scripts”\nConsole: This is where code is executed in R\nEnvironment, History, etc.: A tabbed window showing your working environment, code execution history, and other useful things\nFiles, plots, etc.: A tabbed window showing a file explorer, a plot window, list of installed packages, help files, and viewer\n\n\n\nB.1.2 Scripting\nIn most cases, you will not enter and execute code directly in the console. Code can be written in a script and then sent directly to the console.\nOpen a new script from the File menu…\n\n\n\n\n\n\n\nB.1.3 Executing code in RStudio\nAfter you write code in an R script, it can be sent to the Console to run the code. There are two ways to do this. First, you can hit the Run button at the top right of the scripting window. Second, you can use ctrl+enter (cmd+enter on a Mac). Either option will run the line(s) of script that are selected."
  },
  {
    "objectID": "rintro.html#r-language-fundamentals",
    "href": "rintro.html#r-language-fundamentals",
    "title": "Appendix B — Introduction to R",
    "section": "B.2 R language fundamentals",
    "text": "B.2 R language fundamentals\nR is built around functions. The basic syntax of a function follows the form: function_name(arg1, arg2, ...).\nWith the base install, you will gain access to many functions (2344, to be exact). Some examples:\n\n# print\nprint(\"hello world!\")\n\n[1] \"hello world!\"\n\n# sequence\nseq(1, 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n# random numbers\nrnorm(100, mean = 10, sd = 2)\n\n  [1] 11.837516  9.739560  7.040097  9.681896  9.269019 14.645350 12.177386\n  [8] 12.723857 10.202129 10.101500 11.231241  8.756027  7.045193  8.034444\n [15] 13.580651 10.553980  8.994794 12.989836 10.704077  7.270717  8.336108\n [22]  7.933649 10.789694 11.698187 10.818405  6.018905  8.165465 13.434130\n [29] 11.720770  9.222907  8.631813  7.085891  7.230245 10.949338  7.948949\n [36] 13.757349 11.165194 11.403225 10.225965 10.308853  9.115668 13.900442\n [43] 10.366386  9.811820  8.964730 10.150961 10.209766 15.244364 13.316173\n [50]  9.085781  7.045153 11.663804  5.719120  9.953457  8.340576 11.608798\n [57] 11.153978  8.664696  9.699633 12.364893 10.428658  9.881044 10.544130\n [64]  8.641791  8.014978 10.662652  9.260109 12.468447  9.323607  9.243795\n [71]  8.248457  9.236005  9.257066  7.777311  7.026990 13.303137 12.437130\n [78]  9.054149 11.399232 10.380549 10.785190  9.778781 11.671658 12.611126\n [85]  9.575333 12.686307  9.407363 15.818939  8.017910 11.442335  8.818326\n [92]  6.071415  7.703717  7.671017  9.432778  8.308823  8.115493 11.229877\n [99] 13.845077 10.770340\n\n# average \nmean(rnorm(100))\n\n[1] 0.0825841\n\n# sum\nsum(rnorm(100))\n\n[1] -9.717572\n\n\nVery often you will see functions used like this:\n\nmy_random_sum &lt;- sum(rnorm(100))\n\nThe first part of the line is the name of an object that you make up. The second bit, &lt;-, is the assignment operator. This tells R to take the result of sum(rnorm(100)) and store it in an object named, my_random_sum. It is stored in the environment and can be used by just executing it’s name in the console.\n\nmy_random_sum\n\n[1] 3.661495\n\n\n\nB.2.1 What is the environment?\nThere are two outcomes when you run code. First, the code will simply print output directly in the console. Second, there is no output because you have stored it as a variable using &lt;-. Output that is stored is saved in the environment. The environment is the collection of named objects that are stored in memory for your current R session."
  },
  {
    "objectID": "rintro.html#packages",
    "href": "rintro.html#packages",
    "title": "Appendix B — Introduction to R",
    "section": "B.3 Packages",
    "text": "B.3 Packages\nThe base installation of R is quite powerful. Packages allow you to include new methods for use in R.\n\nB.3.1 CRAN\nMany packages are available on CRAN, The Comprehensive R Archive Network. This is where you download R and also where most will gain access to packages. As of 2023-05-15, there are 19498 packages on CRAN!\n\n\nB.3.2 Installing packages\nWhen a package gets installed, that means the source code is downloaded and put into your library. A default library location is set for you.\nWe use the install.packages() function to download and install a package. Here, we install the readxl package, used below, which is used to upload data from and Excel file.\n\ninstall.packages(\"readxl\")\n\nYou should see some text in the R console showing progress of the installation and a prompt after installation is done.\nAfter installation, you can load a package using the library() function. This makes all functions in a package available for you to use.\n\nlibrary(readxl)\n\nAn important aspect of packages is that you only need to download them once, but every time you start RStudio you need to load them with the library() function."
  },
  {
    "objectID": "rintro.html#data-structures-in-r",
    "href": "rintro.html#data-structures-in-r",
    "title": "Appendix B — Introduction to R",
    "section": "B.4 Data structures in R",
    "text": "B.4 Data structures in R\nNow we can talk about R data structures. Simply put, a data structure is a way for programming languages to handle information storage.\n\nB.4.1 Vectors (one-dimensional data)\nThe basic data format in R is a vector - a one-dimensional grouping of elements that have the same type. These are all vectors and they are created with the c (concatenate) function:\n\ndbl_var &lt;- c(1, 2.5, 4.5)\nint_var &lt;- c(1L, 6L, 10L)\nlog_var &lt;- c(TRUE, FALSE, T, F)\nchr_var &lt;- c(\"a\", \"b\", \"c\")\n\nThe four types of vectors are double (or numeric), integer, logical, and character. The following functions can return useful information about the vectors:\n\nclass(dbl_var)\n\n[1] \"numeric\"\n\nlength(log_var)\n\n[1] 4\n\n\n\n\nB.4.2 Data frames (two-dimensional data)\nA collection of vectors represented as one data object are often described as two-dimensional data, like a spreadsheet, or in R speak, a data frame. Here’s a simple example:\n\nltrs &lt;- c(\"a\", \"b\", \"c\")\nnums &lt;- c(1, 2, 3)\nlogs &lt;- c(T, F, T)\nmydf &lt;- data.frame(ltrs, nums, logs)\nmydf\n\n  ltrs nums  logs\n1    a    1  TRUE\n2    b    2 FALSE\n3    c    3  TRUE\n\n\nThe only constraints required to make a data frame are:\n\nEach column (vector) contains the same type of data\nThe number of observations in each column is equal."
  },
  {
    "objectID": "rintro.html#getting-your-data-into-r",
    "href": "rintro.html#getting-your-data-into-r",
    "title": "Appendix B — Introduction to R",
    "section": "B.5 Getting your data into R",
    "text": "B.5 Getting your data into R\nIt is the rare case when you manually enter your data in R. Most data analysis workflows typically begin with importing a dataset from an external source. We’ll be using read_excel() function from the readxl package.\nWe can import the ExampleSites.xlsx dataset as follows. Note the use of a relative file path. You can see what R is using as your “working directory” using the getwd() function.\n\nsitdat &lt;- read_excel(\"data/ExampleSites.xlsx\")\n\nLet’s explore the dataset a bit.\n\n# get the dimensions\ndim(sitdat)\n\n[1] 11  5\n\n# get the column names\nnames(sitdat)\n\n[1] \"Monitoring Location ID\"        \"Monitoring Location Name\"     \n[3] \"Monitoring Location Latitude\"  \"Monitoring Location Longitude\"\n[5] \"Location Group\"               \n\n# see the first six rows\nhead(sitdat)\n\n# A tibble: 6 × 5\n  `Monitoring Location ID` `Monitoring Location Name` Monitoring Location Lati…¹\n  &lt;chr&gt;                    &lt;chr&gt;                                           &lt;dbl&gt;\n1 ABT-026                  Rte 2, Concord                                   42.5\n2 ABT-062                  Rte 62, Acton                                    42.4\n3 ABT-077                  Rte 27/USGS, Maynard                             42.4\n4 ABT-144                  Rte 62, Stow                                     42.4\n5 ABT-237                  Robin Hill Rd, Marlboro                          42.3\n6 ABT-301                  Rte 9, Westboro                                  42.3\n# ℹ abbreviated name: ¹​`Monitoring Location Latitude`\n# ℹ 2 more variables: `Monitoring Location Longitude` &lt;dbl&gt;,\n#   `Location Group` &lt;chr&gt;\n\n# get the overall structure\nstr(sitdat)\n\ntibble [11 × 5] (S3: tbl_df/tbl/data.frame)\n $ Monitoring Location ID       : chr [1:11] \"ABT-026\" \"ABT-062\" \"ABT-077\" \"ABT-144\" ...\n $ Monitoring Location Name     : chr [1:11] \"Rte 2, Concord\" \"Rte 62, Acton\" \"Rte 27/USGS, Maynard\" \"Rte 62, Stow\" ...\n $ Monitoring Location Latitude : num [1:11] 42.5 42.4 42.4 42.4 42.3 ...\n $ Monitoring Location Longitude: num [1:11] -71.4 -71.4 -71.4 -71.5 -71.6 ...\n $ Location Group               : chr [1:11] \"Assabet\" \"Assabet\" \"Assabet\" \"Assabet\" ...\n\n\nYou can also view a dataset in a spreadsheet style using the View() function:\n\nView(sitdat)"
  },
  {
    "objectID": "rintro.html#summary",
    "href": "rintro.html#summary",
    "title": "Appendix B — Introduction to R",
    "section": "B.6 Summary",
    "text": "B.6 Summary\nIn this intro we learned about R and Rstudio, some of the basic syntax and data structures in R, and how to import files. You’ll be able to follow the rest of the workshop with this knowledge."
  }
]